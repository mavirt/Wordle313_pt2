{"ast":null,"code":"import _objectSpread from \"/Users/mariavirt/WebstormProjects/newreactdemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { calculateNewValue } from \"@testing-library/user-event/dist/utils\";\n\nvar rootReducer = function rootReducer(state, action) {\n  var activeGuess = state.guesses[state.try];\n  var newGuesses = state.guesses;\n\n  switch (action.type) {\n    case \"InputLetter\":\n      {\n        var nl;\n\n        if (!state.end) {\n          var index = activeGuess.indexOf('');\n          var wn = false;\n\n          if (activeGuess.includes(\"\" && index < state.answer.length)) {\n            activeGuess[index] = action.val;\n          } else {\n            wn = true;\n          }\n        }\n\n        newGuesses[state.try] = activeGuess;\n        nl = _objectSpread({}, state, {\n          guesses: newGuesses,\n          change: !state.change\n        });\n        return nl;\n      }\n\n    case \"Delete\":\n      var nD;\n\n      if (!state.end) {\n        var _wn = false;\n        var item;\n        var stop = false;\n\n        for (var i = activeGuess.length - 1; 0 <= 1; i--) {\n          if (!stop) {\n            if (activeGuess[i] !== '') {\n              item = activeGuess[i];\n              stop = true;\n            }\n          }\n        }\n\n        if (activeGuess.indexOf('') == 0) {\n          _wn = true;\n        }\n\n        var _index = activeGuess.lastIndexOf(item);\n\n        activeGuess[_index] = '';\n        newGuesses[state.try] = activeGuess;\n        nD = _objectSpread({}, state, {\n          guesses: newGuesses,\n          change: !state.change\n        });\n        return nD;\n      }\n\n      break;\n\n    case \"SubmitGuess\":\n      var newTry = state.try + 1;\n\n    default:\n      {\n        return state;\n      }\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/mariavirt/WebstormProjects/newreactdemo/src/redux/reducers/rootReducer.js"],"names":["calculateNewValue","rootReducer","state","action","activeGuess","guesses","try","newGuesses","type","nl","end","index","indexOf","wn","includes","answer","length","val","change","nD","item","stop","i","lastIndexOf","newTry"],"mappings":";AAAA,SAAQA,iBAAR,QAAgC,wCAAhC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAOC,MAAP,EAAgB;AAEhC,MAAIC,WAAW,GAAGF,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,GAApB,CAAlB;AACA,MAAIC,UAAU,GAAGL,KAAK,CAACG,OAAvB;;AAEA,UAAOF,MAAM,CAACK,IAAd;AACI,SAAK,aAAL;AAAmB;AACf,YAAIC,EAAJ;;AACA,YAAG,CAACP,KAAK,CAACQ,GAAV,EAAc;AACV,cAAMC,KAAK,GAAGP,WAAW,CAACQ,OAAZ,CAAoB,EAApB,CAAd;AACA,cAAIC,EAAE,GAAG,KAAT;;AACA,cAAGT,WAAW,CAACU,QAAZ,CAAqB,MAAMH,KAAK,GAAGT,KAAK,CAACa,MAAN,CAAaC,MAAhD,CAAH,EAA2D;AACvDZ,YAAAA,WAAW,CAACO,KAAD,CAAX,GAAqBR,MAAM,CAACc,GAA5B;AACH,WAFD,MAEK;AACDJ,YAAAA,EAAE,GAAC,IAAH;AACH;AACJ;;AACDN,QAAAA,UAAU,CAACL,KAAK,CAACI,GAAP,CAAV,GAAwBF,WAAxB;AACAK,QAAAA,EAAE,qBACKP,KADL;AAEEG,UAAAA,OAAO,EAAEE,UAFX;AAGEW,UAAAA,MAAM,EAAC,CAAChB,KAAK,CAACgB;AAHhB,UAAF;AAKA,eAAOT,EAAP;AAEH;;AACD,SAAK,QAAL;AACI,UAAIU,EAAJ;;AACA,UAAI,CAACjB,KAAK,CAACQ,GAAX,EAAgB;AACZ,YAAIG,GAAE,GAAG,KAAT;AACA,YAAIO,IAAJ;AACA,YAAIC,IAAI,GAAG,KAAX;;AAEA,aAAK,IAAIC,CAAC,GAAGlB,WAAW,CAACY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6CM,CAAC,EAA9C,EAAkD;AAC9C,cAAI,CAACD,IAAL,EAAW;AACP,gBAAIjB,WAAW,CAACkB,CAAD,CAAX,KAAmB,EAAvB,EAA2B;AACvBF,cAAAA,IAAI,GAAGhB,WAAW,CAACkB,CAAD,CAAlB;AACAD,cAAAA,IAAI,GAAG,IAAP;AACH;AACJ;AACJ;;AACD,YAAIjB,WAAW,CAACQ,OAAZ,CAAoB,EAApB,KAA2B,CAA/B,EAAkC;AAC9BC,UAAAA,GAAE,GAAG,IAAL;AACH;;AACD,YAAMF,MAAK,GAAGP,WAAW,CAACmB,WAAZ,CAAwBH,IAAxB,CAAd;;AACAhB,QAAAA,WAAW,CAACO,MAAD,CAAX,GAAqB,EAArB;AAEAJ,QAAAA,UAAU,CAACL,KAAK,CAACI,GAAP,CAAV,GAAwBF,WAAxB;AAEAe,QAAAA,EAAE,qBACKjB,KADL;AAEEG,UAAAA,OAAO,EAAEE,UAFX;AAGEW,UAAAA,MAAM,EAAE,CAAChB,KAAK,CAACgB;AAHjB,UAAF;AAKA,eAAOC,EAAP;AACH;;AACD;;AAEJ,SAAK,aAAL;AACI,UAAIK,MAAM,GAACtB,KAAK,CAACI,GAAN,GAAU,CAArB;;AAKJ;AAAQ;AACJ,eAAOJ,KAAP;AACH;AA7DL;;AAgEA,SAAOA,KAAP;AACH,CAtED;;AAwEA,eAAeD,WAAf","sourcesContent":["import {calculateNewValue} from \"@testing-library/user-event/dist/utils\";\n\nconst rootReducer = (state,action)=>{\n\n    let activeGuess = state.guesses[state.try];\n    let newGuesses = state.guesses;\n\n    switch(action.type){\n        case \"InputLetter\":{\n            let nl;\n            if(!state.end){\n                const index = activeGuess.indexOf('');\n                let wn = false;\n                if(activeGuess.includes(\"\" && index < state.answer.length)){\n                    activeGuess[index] = action.val;\n                }else{\n                    wn=true;\n                }\n            }\n            newGuesses[state.try] = activeGuess;\n            nl={\n                ...state,\n                guesses: newGuesses,\n                change:!state.change\n            }\n            return nl;\n\n        }\n        case \"Delete\":\n            let nD;\n            if (!state.end) {\n                let wn = false;\n                let item;\n                let stop = false;\n\n                for (let i = activeGuess.length - 1; 0 <= 1; i--) {\n                    if (!stop) {\n                        if (activeGuess[i] !== '') {\n                            item = activeGuess[i];\n                            stop = true;\n                        }\n                    }\n                }\n                if (activeGuess.indexOf('') == 0) {\n                    wn = true;\n                }\n                const index = activeGuess.lastIndexOf(item);\n                activeGuess[index] = '';\n\n                newGuesses[state.try] = activeGuess;\n\n                nD = {\n                    ...state,\n                    guesses: newGuesses,\n                    change: !state.change\n                }\n                return nD;\n            }\n            break;\n\n        case \"SubmitGuess\":\n            let newTry=state.try+1;\n            \n\n\n\n        default:{\n            return state;\n        }\n    }\n\n    return state;\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}